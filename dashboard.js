// Dashboard page functionality
document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard page loaded, initializing...');
    
    // --- –¢–∞–π–º–µ—Ä—ã ---
    const streamEndDate = new Date();
    streamEndDate.setHours(streamEndDate.getHours() + 2);
    startCountdown('timer-hunting', streamEndDate.getTime());

    const raceEndDate = new Date();
    raceEndDate.setDate(raceEndDate.getDate() + 33);
    raceEndDate.setHours(raceEndDate.getHours() + 11);
    raceEndDate.setMinutes(raceEndDate.getMinutes() + 34);
    startCountdown('timer-race', raceEndDate.getTime());

    const streamEndDate2 = new Date();
    streamEndDate2.setHours(streamEndDate2.getHours() + 2);
    startCountdown('timer-stream', streamEndDate2.getTime());

    // --- –°–ª–∞–π–¥–µ—Ä –±–∞–Ω–Ω–µ—Ä–æ–≤ ---
    initBannerSlider();

    // --- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–∞ ---
    initLanguageSwitcher();

    // --- –ë–∞–ª–∞–Ω—Å—ã –∏–∑ API ---
    const mainAccountCard = document.querySelector('account-card[type="main"]');
    const partnerAccountCard = document.querySelector('account-card[type="partner"]');
    
    console.log('Account card components found:', {
        mainAccountCard: !!mainAccountCard,
        partnerAccountCard: !!partnerAccountCard
    });

    async function loadDashboardBalances() {
        try {
            console.log('Loading dashboard balances...');
            
            // Mock data for local testing
            const mockWalletData = {
                main_balance: 1250.75,
                partner_balance: 850.25
            };
            
            console.log('Using mock wallet data:', mockWalletData);
            
            if (mainAccountCard) {
                mainAccountCard.updateBalance(Number(mockWalletData.main_balance).toFixed(2));
                console.log('Updated main balance to:', Number(mockWalletData.main_balance).toFixed(2));
            } else {
                console.log('Main account card not found');
            }
            
            if (partnerAccountCard) {
                partnerAccountCard.updateBalance(Number(mockWalletData.partner_balance).toFixed(2));
                console.log('Updated partner balance to:', Number(mockWalletData.partner_balance).toFixed(2));
            } else {
                console.log('Partner account card not found');
            }
            
            console.log('Dashboard balances updated');
        } catch (e) { 
            console.error('Error loading dashboard balances:', e); 
        }
    }

    loadDashboardBalances();

    // --- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç ---
    const currencyButtons = document.querySelectorAll('.currency-switcher button');

    const balances = {
        main: { USD: 0, EUR: 0, GBP: 0 },
        partner: { USD: 0, EUR: 0, GBP: 0 }
    };

    currencyButtons.forEach(button => {
        button.addEventListener('click', () => {
            const currency = button.dataset.currency;
            const symbols = { USD: '$', EUR: '‚Ç¨', GBP: '¬£' };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
            currencyButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞–ª—é—Ç
            document.querySelectorAll('.account-summary__badge').forEach(badge => {
                if (badge.textContent === 'USD' || badge.textContent === 'EUR' || badge.textContent === 'GBP') {
                    badge.textContent = currency;
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
            document.querySelectorAll('.account-summary__amount').forEach(amount => {
                const currentText = amount.textContent;
                const value = currentText.replace(/[$‚Ç¨¬£]/g, '').trim();
                amount.textContent = `${value} ${symbols[currency]}`;
            });
        });
    });

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞ ---
    function startCountdown(elementId, endTime) {
        const element = document.getElementById(elementId);
        if (!element) return;

        function updateCountdown() {
            const now = new Date().getTime();
            const distance = endTime - now;

            if (distance < 0) {
                element.textContent = "–ó–∞–≤–µ—Ä—à–µ–Ω–æ";
                return;
            }

            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);

            let timeString = "";
            if (days > 0) timeString += `${days}–¥ `;
            if (hours > 0) timeString += `${hours}—á `;
            if (minutes > 0) timeString += `${minutes}–º `;
            timeString += `${seconds}—Å`;

            element.textContent = timeString;
        }

        updateCountdown();
        setInterval(updateCountdown, 1000);
    }

    // --- –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞ –±–∞–Ω–Ω–µ—Ä–æ–≤ ---
    function initBannerSlider() {
        const sliderTrack = document.getElementById('slider-track');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const dots = document.querySelectorAll('.dot');
        
        if (!sliderTrack || !prevBtn || !nextBtn) {
            console.log('Slider elements not found, skipping slider initialization');
            return;
        }

        let currentSlide = 0;
        const totalSlides = document.querySelectorAll('.banner-slide').length;

        function updateSlider() {
            const translateX = -currentSlide * 100;
            sliderTrack.style.transform = `translateX(${translateX}%)`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—á–∫–∏
            dots.forEach((dot, index) => {
                dot.classList.toggle('active', index === currentSlide);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            prevBtn.disabled = currentSlide === 0;
            nextBtn.disabled = currentSlide === totalSlides - 1;
        }

        function nextSlide() {
            if (currentSlide < totalSlides - 1) {
                currentSlide++;
                updateSlider();
            }
        }

        function prevSlide() {
            if (currentSlide > 0) {
                currentSlide--;
                updateSlider();
            }
        }

        function goToSlide(slideIndex) {
            if (slideIndex >= 0 && slideIndex < totalSlides) {
                currentSlide = slideIndex;
                updateSlider();
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        nextBtn.addEventListener('click', nextSlide);
        prevBtn.addEventListener('click', prevSlide);
        
        dots.forEach((dot, index) => {
            dot.addEventListener('click', () => goToSlide(index));
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            nextSlide();
            if (currentSlide === 0) {
                // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
                currentSlide = totalSlides - 1;
                updateSlider();
            }
        }, 5000);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        updateSlider();
        
        console.log('Banner slider initialized with', totalSlides, 'slides');
    }

    function initLanguageSwitcher() {
        const languageToggle = document.getElementById('languageToggle');
        const languageDropdown = document.getElementById('languageDropdown');
        const languageOptions = document.querySelectorAll('.language-option');

        if (!languageToggle || !languageDropdown) {
            console.log('Language switcher elements not found');
            return;
        }

        // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
        let currentLang = 'ru';

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        languageToggle.addEventListener('click', (e) => {
            e.stopPropagation();
            languageDropdown.classList.toggle('show');
            languageToggle.classList.toggle('active');
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –æ–ø—Ü–∏—è–º —è–∑—ã–∫–∞
        languageOptions.forEach(option => {
            option.addEventListener('click', (e) => {
                e.stopPropagation();
                const selectedLang = option.dataset.lang;
                
                if (selectedLang !== currentLang) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
                    currentLang = selectedLang;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
                    const flagIcon = languageToggle.querySelector('.flag-icon');
                    const langText = languageToggle.querySelector('.lang-text');
                    
                    if (selectedLang === 'ru') {
                        flagIcon.textContent = 'üá∑üá∫';
                        langText.textContent = 'RU';
                    } else if (selectedLang === 'en') {
                        flagIcon.textContent = 'üá∫üá∏';
                        langText.textContent = 'EN';
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
                    languageOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é
                    languageDropdown.classList.remove('show');
                    languageToggle.classList.remove('active');
                    
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
                    console.log('Language changed to:', selectedLang);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ localStorage
                    localStorage.setItem('selectedLanguage', selectedLang);
                } else {
                    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–æ—Ç –∂–µ —è–∑—ã–∫, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
                    languageDropdown.classList.remove('show');
                    languageToggle.classList.remove('active');
                }
            });
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            if (!languageToggle.contains(e.target) && !languageDropdown.contains(e.target)) {
                languageDropdown.classList.remove('show');
                languageToggle.classList.remove('active');
            }
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        const savedLang = localStorage.getItem('selectedLanguage');
        if (savedLang && (savedLang === 'ru' || savedLang === 'en')) {
            currentLang = savedLang;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            const flagIcon = languageToggle.querySelector('.flag-icon');
            const langText = languageToggle.querySelector('.lang-text');
            
            if (currentLang === 'ru') {
                flagIcon.textContent = 'üá∑üá∫';
                langText.textContent = 'RU';
            } else if (currentLang === 'en') {
                flagIcon.textContent = 'üá∫üá∏';
                langText.textContent = 'EN';
            }
            
            // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é
            languageOptions.forEach(opt => {
                opt.classList.remove('selected');
                if (opt.dataset.lang === currentLang) {
                    opt.classList.add('selected');
                }
            });
        }

        console.log('Language switcher initialized');
    }
});
